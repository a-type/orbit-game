{"version":3,"sources":["../webpack/bootstrap","cubes/cubesValues.ts","cubes/cubes.worker.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","edgeTable","Int32Array","triTable","context","field","ev","size","Math","vertexList","Float32Array","normalList","colorList","size2","size3","halfSize","delta","yDelta","zDelta","normalCache","palette","maxCount","count","positionArray","normalArray","uvArray","colorArray","lerp","a","b","mu","isol","valp2","offset","x","q","colorOffset1","colorOffset2","y","q2","z","q3","polygonize","q1","qy","qz","q1y","q1z","qyz","q1yz","cubeIndex","field0","field1","field2","field3","field4","field5","field6","field7","bits","cubesValues","fx2","fx","fy2","fy","fz2","fz","computeNormal","vertexInterpolateX","vertexInterpolateY","vertexInterpolateZ","numTris","o2","o1","o3","posnormtriv","pos","endValue","zOffset","yOffset","result","hasPositions","hasNormals","hasColors","hasUvs","generate"],"mappings":"aACE,IAAIA,EAAmB,GAGvB,SAASC,EAAoBC,GAG5B,GAAGF,EAAiBE,GACnB,OAAOF,EAAiBE,GAAUC,QAGnC,IAAIC,EAASJ,EAAiBE,GAAY,CACzCG,EAAGH,EACHI,GAAG,EACHH,QAAS,IAUV,OANAI,EAAQL,GAAUM,KAAKJ,EAAOD,QAASC,EAAQA,EAAOD,QAASF,GAG/DG,EAAOE,GAAI,EAGJF,EAAOD,QAKfF,EAAoBQ,EAAIF,EAGxBN,EAAoBS,EAAIV,EAGxBC,EAAoBU,EAAI,SAASR,EAASS,EAAMC,GAC3CZ,EAAoBa,EAAEX,EAASS,IAClCG,OAAOC,eAAeb,EAASS,EAAM,CAAEK,YAAY,EAAMC,IAAKL,KAKhEZ,EAAoBkB,EAAI,SAAShB,GACX,qBAAXiB,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAeb,EAASiB,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAeb,EAAS,aAAc,CAAEmB,OAAO,KAQvDrB,EAAoBsB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQrB,EAAoBqB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,kBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFA1B,EAAoBkB,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOrB,EAAoBU,EAAEe,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRzB,EAAoB6B,EAAI,SAAS1B,GAChC,IAAIS,EAAST,GAAUA,EAAOqB,WAC7B,WAAwB,OAAOrB,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAH,EAAoBU,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRZ,EAAoBa,EAAI,SAASiB,EAAQC,GAAY,OAAOjB,OAAOkB,UAAUC,eAAe1B,KAAKuB,EAAQC,IAGzG/B,EAAoBkC,EAAI,eAIjBlC,EAAoBA,EAAoBmC,EAAI,G,sCC1ErD,IAswIe,GAAEC,UAtwIC,IAAIC,WAAW,CAC/B,EACA,IACA,IACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,IACA,IACA,IACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,IACA,IACA,GACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,IACA,IACA,IACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,IACA,IACA,IACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,IACA,IACA,KACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,IACA,IACA,GACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,IACA,IACA,IACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,IACA,IACA,IACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,IACA,GACA,IACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,IACA,KACA,IACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,IACA,IACA,IACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,IACA,IACA,IACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,IACA,GACA,IACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,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","file":"static/js/CubeWorker.8771c507.chunk.worker.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/orbit-game/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/////////////////////////////////////\n// Marching cubes lookup tables\n/////////////////////////////////////\n\n// These tables are straight from Paul Bourke's page:\n// http://local.wasp.uwa.edu.au/~pbourke/geometry/polygonise/\n// who in turn got them from Cory Gene Bloyd.\n\nconst edgeTable = new Int32Array([\n  0x0,\n  0x109,\n  0x203,\n  0x30a,\n  0x406,\n  0x50f,\n  0x605,\n  0x70c,\n  0x80c,\n  0x905,\n  0xa0f,\n  0xb06,\n  0xc0a,\n  0xd03,\n  0xe09,\n  0xf00,\n  0x190,\n  0x99,\n  0x393,\n  0x29a,\n  0x596,\n  0x49f,\n  0x795,\n  0x69c,\n  0x99c,\n  0x895,\n  0xb9f,\n  0xa96,\n  0xd9a,\n  0xc93,\n  0xf99,\n  0xe90,\n  0x230,\n  0x339,\n  0x33,\n  0x13a,\n  0x636,\n  0x73f,\n  0x435,\n  0x53c,\n  0xa3c,\n  0xb35,\n  0x83f,\n  0x936,\n  0xe3a,\n  0xf33,\n  0xc39,\n  0xd30,\n  0x3a0,\n  0x2a9,\n  0x1a3,\n  0xaa,\n  0x7a6,\n  0x6af,\n  0x5a5,\n  0x4ac,\n  0xbac,\n  0xaa5,\n  0x9af,\n  0x8a6,\n  0xfaa,\n  0xea3,\n  0xda9,\n  0xca0,\n  0x460,\n  0x569,\n  0x663,\n  0x76a,\n  0x66,\n  0x16f,\n  0x265,\n  0x36c,\n  0xc6c,\n  0xd65,\n  0xe6f,\n  0xf66,\n  0x86a,\n  0x963,\n  0xa69,\n  0xb60,\n  0x5f0,\n  0x4f9,\n  0x7f3,\n  0x6fa,\n  0x1f6,\n  0xff,\n  0x3f5,\n  0x2fc,\n  0xdfc,\n  0xcf5,\n  0xfff,\n  0xef6,\n  0x9fa,\n  0x8f3,\n  0xbf9,\n  0xaf0,\n  0x650,\n  0x759,\n  0x453,\n  0x55a,\n  0x256,\n  0x35f,\n  0x55,\n  0x15c,\n  0xe5c,\n  0xf55,\n  0xc5f,\n  0xd56,\n  0xa5a,\n  0xb53,\n  0x859,\n  0x950,\n  0x7c0,\n  0x6c9,\n  0x5c3,\n  0x4ca,\n  0x3c6,\n  0x2cf,\n  0x1c5,\n  0xcc,\n  0xfcc,\n  0xec5,\n  0xdcf,\n  0xcc6,\n  0xbca,\n  0xac3,\n  0x9c9,\n  0x8c0,\n  0x8c0,\n  0x9c9,\n  0xac3,\n  0xbca,\n  0xcc6,\n  0xdcf,\n  0xec5,\n  0xfcc,\n  0xcc,\n  0x1c5,\n  0x2cf,\n  0x3c6,\n  0x4ca,\n  0x5c3,\n  0x6c9,\n  0x7c0,\n  0x950,\n  0x859,\n  0xb53,\n  0xa5a,\n  0xd56,\n  0xc5f,\n  0xf55,\n  0xe5c,\n  0x15c,\n  0x55,\n  0x35f,\n  0x256,\n  0x55a,\n  0x453,\n  0x759,\n  0x650,\n  0xaf0,\n  0xbf9,\n  0x8f3,\n  0x9fa,\n  0xef6,\n  0xfff,\n  0xcf5,\n  0xdfc,\n  0x2fc,\n  0x3f5,\n  0xff,\n  0x1f6,\n  0x6fa,\n  0x7f3,\n  0x4f9,\n  0x5f0,\n  0xb60,\n  0xa69,\n  0x963,\n  0x86a,\n  0xf66,\n  0xe6f,\n  0xd65,\n  0xc6c,\n  0x36c,\n  0x265,\n  0x16f,\n  0x66,\n  0x76a,\n  0x663,\n  0x569,\n  0x460,\n  0xca0,\n  0xda9,\n  0xea3,\n  0xfaa,\n  0x8a6,\n  0x9af,\n  0xaa5,\n  0xbac,\n  0x4ac,\n  0x5a5,\n  0x6af,\n  0x7a6,\n  0xaa,\n  0x1a3,\n  0x2a9,\n  0x3a0,\n  0xd30,\n  0xc39,\n  0xf33,\n  0xe3a,\n  0x936,\n  0x83f,\n  0xb35,\n  0xa3c,\n  0x53c,\n  0x435,\n  0x73f,\n  0x636,\n  0x13a,\n  0x33,\n  0x339,\n  0x230,\n  0xe90,\n  0xf99,\n  0xc93,\n  0xd9a,\n  0xa96,\n  0xb9f,\n  0x895,\n  0x99c,\n  0x69c,\n  0x795,\n  0x49f,\n  0x596,\n  0x29a,\n  0x393,\n  0x99,\n  0x190,\n  0xf00,\n  0xe09,\n  0xd03,\n  0xc0a,\n  0xb06,\n  0xa0f,\n  0x905,\n  0x80c,\n  0x70c,\n  0x605,\n  0x50f,\n  0x406,\n  0x30a,\n  0x203,\n  0x109,\n  0x0,\n]);\n\nconst triTable = new Int32Array([\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  0,\n  8,\n  3,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  0,\n  1,\n  9,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  1,\n  8,\n  3,\n  9,\n  8,\n  1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  1,\n  2,\n  10,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  0,\n  8,\n  3,\n  1,\n  2,\n  10,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  9,\n  2,\n  10,\n  0,\n  2,\n  9,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  2,\n  8,\n  3,\n  2,\n  10,\n  8,\n  10,\n  9,\n  8,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  3,\n  11,\n  2,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  0,\n  11,\n  2,\n  8,\n  11,\n  0,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  1,\n  9,\n  0,\n  2,\n  3,\n  11,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  1,\n  11,\n  2,\n  1,\n  9,\n  11,\n  9,\n  8,\n  11,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  3,\n  10,\n  1,\n  11,\n  10,\n  3,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  0,\n  10,\n  1,\n  0,\n  8,\n  10,\n  8,\n  11,\n  10,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  3,\n  9,\n  0,\n  3,\n  11,\n  9,\n  11,\n  10,\n  9,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  9,\n  8,\n  10,\n  10,\n  8,\n  11,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  4,\n  7,\n  8,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  4,\n  3,\n  0,\n  7,\n  3,\n  4,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  0,\n  1,\n  9,\n  8,\n  4,\n  7,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  4,\n  1,\n  9,\n  4,\n  7,\n  1,\n  7,\n  3,\n  1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  1,\n  2,\n  10,\n  8,\n  4,\n  7,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  3,\n  4,\n  7,\n  3,\n  0,\n  4,\n  1,\n  2,\n  10,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  9,\n  2,\n  10,\n  9,\n  0,\n  2,\n  8,\n  4,\n  7,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  2,\n  10,\n  9,\n  2,\n  9,\n  7,\n  2,\n  7,\n  3,\n  7,\n  9,\n  4,\n  -1,\n  -1,\n  -1,\n  -1,\n  8,\n  4,\n  7,\n  3,\n  11,\n  2,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  11,\n  4,\n  7,\n  11,\n  2,\n  4,\n  2,\n  0,\n  4,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  9,\n  0,\n  1,\n  8,\n  4,\n  7,\n  2,\n  3,\n  11,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  4,\n  7,\n  11,\n  9,\n  4,\n  11,\n  9,\n  11,\n  2,\n  9,\n  2,\n  1,\n  -1,\n  -1,\n  -1,\n  -1,\n  3,\n  10,\n  1,\n  3,\n  11,\n  10,\n  7,\n  8,\n  4,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  1,\n  11,\n  10,\n  1,\n  4,\n  11,\n  1,\n  0,\n  4,\n  7,\n  11,\n  4,\n  -1,\n  -1,\n  -1,\n  -1,\n  4,\n  7,\n  8,\n  9,\n  0,\n  11,\n  9,\n  11,\n  10,\n  11,\n  0,\n  3,\n  -1,\n  -1,\n  -1,\n  -1,\n  4,\n  7,\n  11,\n  4,\n  11,\n  9,\n  9,\n  11,\n  10,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  9,\n  5,\n  4,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  9,\n  5,\n  4,\n  0,\n  8,\n  3,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  0,\n  5,\n  4,\n  1,\n  5,\n  0,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  8,\n  5,\n  4,\n  8,\n  3,\n  5,\n  3,\n  1,\n  5,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  1,\n  2,\n  10,\n  9,\n  5,\n  4,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  3,\n  0,\n  8,\n  1,\n  2,\n  10,\n  4,\n  9,\n  5,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  5,\n  2,\n  10,\n  5,\n  4,\n  2,\n  4,\n  0,\n  2,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  2,\n  10,\n  5,\n  3,\n  2,\n  5,\n  3,\n  5,\n  4,\n  3,\n  4,\n  8,\n  -1,\n  -1,\n  -1,\n  -1,\n  9,\n  5,\n  4,\n  2,\n  3,\n  11,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  0,\n  11,\n  2,\n  0,\n  8,\n  11,\n  4,\n  9,\n  5,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  0,\n  5,\n  4,\n  0,\n  1,\n  5,\n  2,\n  3,\n  11,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  2,\n  1,\n  5,\n  2,\n  5,\n  8,\n  2,\n  8,\n  11,\n  4,\n  8,\n  5,\n  -1,\n  -1,\n  -1,\n  -1,\n  10,\n  3,\n  11,\n  10,\n  1,\n  3,\n  9,\n  5,\n  4,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  4,\n  9,\n  5,\n  0,\n  8,\n  1,\n  8,\n  10,\n  1,\n  8,\n  11,\n  10,\n  -1,\n  -1,\n  -1,\n  -1,\n  5,\n  4,\n  0,\n  5,\n  0,\n  11,\n  5,\n  11,\n  10,\n  11,\n  0,\n  3,\n  -1,\n  -1,\n  -1,\n  -1,\n  5,\n  4,\n  8,\n  5,\n  8,\n  10,\n  10,\n  8,\n  11,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  9,\n  7,\n  8,\n  5,\n  7,\n  9,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  9,\n  3,\n  0,\n  9,\n  5,\n  3,\n  5,\n  7,\n  3,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  0,\n  7,\n  8,\n  0,\n  1,\n  7,\n  1,\n  5,\n  7,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  1,\n  5,\n  3,\n  3,\n  5,\n  7,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  9,\n  7,\n  8,\n  9,\n  5,\n  7,\n  10,\n  1,\n  2,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  10,\n  1,\n  2,\n  9,\n  5,\n  0,\n  5,\n  3,\n  0,\n  5,\n  7,\n  3,\n  -1,\n  -1,\n  -1,\n  -1,\n  8,\n  0,\n  2,\n  8,\n  2,\n  5,\n  8,\n  5,\n  7,\n  10,\n  5,\n  2,\n  -1,\n  -1,\n  -1,\n  -1,\n  2,\n  10,\n  5,\n  2,\n  5,\n  3,\n  3,\n  5,\n  7,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  7,\n  9,\n  5,\n  7,\n  8,\n  9,\n  3,\n  11,\n  2,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  9,\n  5,\n  7,\n  9,\n  7,\n  2,\n  9,\n  2,\n  0,\n  2,\n  7,\n  11,\n  -1,\n  -1,\n  -1,\n  -1,\n  2,\n  3,\n  11,\n  0,\n  1,\n  8,\n  1,\n  7,\n  8,\n  1,\n  5,\n  7,\n  -1,\n  -1,\n  -1,\n  -1,\n  11,\n  2,\n  1,\n  11,\n  1,\n  7,\n  7,\n  1,\n  5,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  9,\n  5,\n  8,\n  8,\n  5,\n  7,\n  10,\n  1,\n  3,\n  10,\n  3,\n  11,\n  -1,\n  -1,\n  -1,\n  -1,\n  5,\n  7,\n  0,\n  5,\n  0,\n  9,\n  7,\n  11,\n  0,\n  1,\n  0,\n  10,\n  11,\n  10,\n  0,\n  -1,\n  11,\n  10,\n  0,\n  11,\n  0,\n  3,\n  10,\n  5,\n  0,\n  8,\n  0,\n  7,\n  5,\n  7,\n  0,\n  -1,\n  11,\n  10,\n  5,\n  7,\n  11,\n  5,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  10,\n  6,\n  5,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  0,\n  8,\n  3,\n  5,\n  10,\n  6,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  9,\n  0,\n  1,\n  5,\n  10,\n  6,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  1,\n  8,\n  3,\n  1,\n  9,\n  8,\n  5,\n  10,\n  6,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  1,\n  6,\n  5,\n  2,\n  6,\n  1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  1,\n  6,\n  5,\n  1,\n  2,\n  6,\n  3,\n  0,\n  8,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  9,\n  6,\n  5,\n  9,\n  0,\n  6,\n  0,\n  2,\n  6,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  5,\n  9,\n  8,\n  5,\n  8,\n  2,\n  5,\n  2,\n  6,\n  3,\n  2,\n  8,\n  -1,\n  -1,\n  -1,\n  -1,\n  2,\n  3,\n  11,\n  10,\n  6,\n  5,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  11,\n  0,\n  8,\n  11,\n  2,\n  0,\n  10,\n  6,\n  5,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  0,\n  1,\n  9,\n  2,\n  3,\n  11,\n  5,\n  10,\n  6,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  5,\n  10,\n  6,\n  1,\n  9,\n  2,\n  9,\n  11,\n  2,\n  9,\n  8,\n  11,\n  -1,\n  -1,\n  -1,\n  -1,\n  6,\n  3,\n  11,\n  6,\n  5,\n  3,\n  5,\n  1,\n  3,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  0,\n  8,\n  11,\n  0,\n  11,\n  5,\n  0,\n  5,\n  1,\n  5,\n  11,\n  6,\n  -1,\n  -1,\n  -1,\n  -1,\n  3,\n  11,\n  6,\n  0,\n  3,\n  6,\n  0,\n  6,\n  5,\n  0,\n  5,\n  9,\n  -1,\n  -1,\n  -1,\n  -1,\n  6,\n  5,\n  9,\n  6,\n  9,\n  11,\n  11,\n  9,\n  8,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  5,\n  10,\n  6,\n  4,\n  7,\n  8,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  4,\n  3,\n  0,\n  4,\n  7,\n  3,\n  6,\n  5,\n  10,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  1,\n  9,\n  0,\n  5,\n  10,\n  6,\n  8,\n  4,\n  7,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  10,\n  6,\n  5,\n  1,\n  9,\n  7,\n  1,\n  7,\n  3,\n  7,\n  9,\n  4,\n  -1,\n  -1,\n  -1,\n  -1,\n  6,\n  1,\n  2,\n  6,\n  5,\n  1,\n  4,\n  7,\n  8,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  1,\n  2,\n  5,\n  5,\n  2,\n  6,\n  3,\n  0,\n  4,\n  3,\n  4,\n  7,\n  -1,\n  -1,\n  -1,\n  -1,\n  8,\n  4,\n  7,\n  9,\n  0,\n  5,\n  0,\n  6,\n  5,\n  0,\n  2,\n  6,\n  -1,\n  -1,\n  -1,\n  -1,\n  7,\n  3,\n  9,\n  7,\n  9,\n  4,\n  3,\n  2,\n  9,\n  5,\n  9,\n  6,\n  2,\n  6,\n  9,\n  -1,\n  3,\n  11,\n  2,\n  7,\n  8,\n  4,\n  10,\n  6,\n  5,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  5,\n  10,\n  6,\n  4,\n  7,\n  2,\n  4,\n  2,\n  0,\n  2,\n  7,\n  11,\n  -1,\n  -1,\n  -1,\n  -1,\n  0,\n  1,\n  9,\n  4,\n  7,\n  8,\n  2,\n  3,\n  11,\n  5,\n  10,\n  6,\n  -1,\n  -1,\n  -1,\n  -1,\n  9,\n  2,\n  1,\n  9,\n  11,\n  2,\n  9,\n  4,\n  11,\n  7,\n  11,\n  4,\n  5,\n  10,\n  6,\n  -1,\n  8,\n  4,\n  7,\n  3,\n  11,\n  5,\n  3,\n  5,\n  1,\n  5,\n  11,\n  6,\n  -1,\n  -1,\n  -1,\n  -1,\n  5,\n  1,\n  11,\n  5,\n  11,\n  6,\n  1,\n  0,\n  11,\n  7,\n  11,\n  4,\n  0,\n  4,\n  11,\n  -1,\n  0,\n  5,\n  9,\n  0,\n  6,\n  5,\n  0,\n  3,\n  6,\n  11,\n  6,\n  3,\n  8,\n  4,\n  7,\n  -1,\n  6,\n  5,\n  9,\n  6,\n  9,\n  11,\n  4,\n  7,\n  9,\n  7,\n  11,\n  9,\n  -1,\n  -1,\n  -1,\n  -1,\n  10,\n  4,\n  9,\n  6,\n  4,\n  10,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  4,\n  10,\n  6,\n  4,\n  9,\n  10,\n  0,\n  8,\n  3,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  10,\n  0,\n  1,\n  10,\n  6,\n  0,\n  6,\n  4,\n  0,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  8,\n  3,\n  1,\n  8,\n  1,\n  6,\n  8,\n  6,\n  4,\n  6,\n  1,\n  10,\n  -1,\n  -1,\n  -1,\n  -1,\n  1,\n  4,\n  9,\n  1,\n  2,\n  4,\n  2,\n  6,\n  4,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  3,\n  0,\n  8,\n  1,\n  2,\n  9,\n  2,\n  4,\n  9,\n  2,\n  6,\n  4,\n  -1,\n  -1,\n  -1,\n  -1,\n  0,\n  2,\n  4,\n  4,\n  2,\n  6,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  8,\n  3,\n  2,\n  8,\n  2,\n  4,\n  4,\n  2,\n  6,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  10,\n  4,\n  9,\n  10,\n  6,\n  4,\n  11,\n  2,\n  3,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  0,\n  8,\n  2,\n  2,\n  8,\n  11,\n  4,\n  9,\n  10,\n  4,\n  10,\n  6,\n  -1,\n  -1,\n  -1,\n  -1,\n  3,\n  11,\n  2,\n  0,\n  1,\n  6,\n  0,\n  6,\n  4,\n  6,\n  1,\n  10,\n  -1,\n  -1,\n  -1,\n  -1,\n  6,\n  4,\n  1,\n  6,\n  1,\n  10,\n  4,\n  8,\n  1,\n  2,\n  1,\n  11,\n  8,\n  11,\n  1,\n  -1,\n  9,\n  6,\n  4,\n  9,\n  3,\n  6,\n  9,\n  1,\n  3,\n  11,\n  6,\n  3,\n  -1,\n  -1,\n  -1,\n  -1,\n  8,\n  11,\n  1,\n  8,\n  1,\n  0,\n  11,\n  6,\n  1,\n  9,\n  1,\n  4,\n  6,\n  4,\n  1,\n  -1,\n  3,\n  11,\n  6,\n  3,\n  6,\n  0,\n  0,\n  6,\n  4,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  6,\n  4,\n  8,\n  11,\n  6,\n  8,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  7,\n  10,\n  6,\n  7,\n  8,\n  10,\n  8,\n  9,\n  10,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  0,\n  7,\n  3,\n  0,\n  10,\n  7,\n  0,\n  9,\n  10,\n  6,\n  7,\n  10,\n  -1,\n  -1,\n  -1,\n  -1,\n  10,\n  6,\n  7,\n  1,\n  10,\n  7,\n  1,\n  7,\n  8,\n  1,\n  8,\n  0,\n  -1,\n  -1,\n  -1,\n  -1,\n  10,\n  6,\n  7,\n  10,\n  7,\n  1,\n  1,\n  7,\n  3,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  1,\n  2,\n  6,\n  1,\n  6,\n  8,\n  1,\n  8,\n  9,\n  8,\n  6,\n  7,\n  -1,\n  -1,\n  -1,\n  -1,\n  2,\n  6,\n  9,\n  2,\n  9,\n  1,\n  6,\n  7,\n  9,\n  0,\n  9,\n  3,\n  7,\n  3,\n  9,\n  -1,\n  7,\n  8,\n  0,\n  7,\n  0,\n  6,\n  6,\n  0,\n  2,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  7,\n  3,\n  2,\n  6,\n  7,\n  2,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  2,\n  3,\n  11,\n  10,\n  6,\n  8,\n  10,\n  8,\n  9,\n  8,\n  6,\n  7,\n  -1,\n  -1,\n  -1,\n  -1,\n  2,\n  0,\n  7,\n  2,\n  7,\n  11,\n  0,\n  9,\n  7,\n  6,\n  7,\n  10,\n  9,\n  10,\n  7,\n  -1,\n  1,\n  8,\n  0,\n  1,\n  7,\n  8,\n  1,\n  10,\n  7,\n  6,\n  7,\n  10,\n  2,\n  3,\n  11,\n  -1,\n  11,\n  2,\n  1,\n  11,\n  1,\n  7,\n  10,\n  6,\n  1,\n  6,\n  7,\n  1,\n  -1,\n  -1,\n  -1,\n  -1,\n  8,\n  9,\n  6,\n  8,\n  6,\n  7,\n  9,\n  1,\n  6,\n  11,\n  6,\n  3,\n  1,\n  3,\n  6,\n  -1,\n  0,\n  9,\n  1,\n  11,\n  6,\n  7,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  7,\n  8,\n  0,\n  7,\n  0,\n  6,\n  3,\n  11,\n  0,\n  11,\n  6,\n  0,\n  -1,\n  -1,\n  -1,\n  -1,\n  7,\n  11,\n  6,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  7,\n  6,\n  11,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  3,\n  0,\n  8,\n  11,\n  7,\n  6,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  0,\n  1,\n  9,\n  11,\n  7,\n  6,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  8,\n  1,\n  9,\n  8,\n  3,\n  1,\n  11,\n  7,\n  6,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  10,\n  1,\n  2,\n  6,\n  11,\n  7,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  1,\n  2,\n  10,\n  3,\n  0,\n  8,\n  6,\n  11,\n  7,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  2,\n  9,\n  0,\n  2,\n  10,\n  9,\n  6,\n  11,\n  7,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  6,\n  11,\n  7,\n  2,\n  10,\n  3,\n  10,\n  8,\n  3,\n  10,\n  9,\n  8,\n  -1,\n  -1,\n  -1,\n  -1,\n  7,\n  2,\n  3,\n  6,\n  2,\n  7,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  7,\n  0,\n  8,\n  7,\n  6,\n  0,\n  6,\n  2,\n  0,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  2,\n  7,\n  6,\n  2,\n  3,\n  7,\n  0,\n  1,\n  9,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  1,\n  6,\n  2,\n  1,\n  8,\n  6,\n  1,\n  9,\n  8,\n  8,\n  7,\n  6,\n  -1,\n  -1,\n  -1,\n  -1,\n  10,\n  7,\n  6,\n  10,\n  1,\n  7,\n  1,\n  3,\n  7,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  10,\n  7,\n  6,\n  1,\n  7,\n  10,\n  1,\n  8,\n  7,\n  1,\n  0,\n  8,\n  -1,\n  -1,\n  -1,\n  -1,\n  0,\n  3,\n  7,\n  0,\n  7,\n  10,\n  0,\n  10,\n  9,\n  6,\n  10,\n  7,\n  -1,\n  -1,\n  -1,\n  -1,\n  7,\n  6,\n  10,\n  7,\n  10,\n  8,\n  8,\n  10,\n  9,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  6,\n  8,\n  4,\n  11,\n  8,\n  6,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  3,\n  6,\n  11,\n  3,\n  0,\n  6,\n  0,\n  4,\n  6,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  8,\n  6,\n  11,\n  8,\n  4,\n  6,\n  9,\n  0,\n  1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  9,\n  4,\n  6,\n  9,\n  6,\n  3,\n  9,\n  3,\n  1,\n  11,\n  3,\n  6,\n  -1,\n  -1,\n  -1,\n  -1,\n  6,\n  8,\n  4,\n  6,\n  11,\n  8,\n  2,\n  10,\n  1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  1,\n  2,\n  10,\n  3,\n  0,\n  11,\n  0,\n  6,\n  11,\n  0,\n  4,\n  6,\n  -1,\n  -1,\n  -1,\n  -1,\n  4,\n  11,\n  8,\n  4,\n  6,\n  11,\n  0,\n  2,\n  9,\n  2,\n  10,\n  9,\n  -1,\n  -1,\n  -1,\n  -1,\n  10,\n  9,\n  3,\n  10,\n  3,\n  2,\n  9,\n  4,\n  3,\n  11,\n  3,\n  6,\n  4,\n  6,\n  3,\n  -1,\n  8,\n  2,\n  3,\n  8,\n  4,\n  2,\n  4,\n  6,\n  2,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  0,\n  4,\n  2,\n  4,\n  6,\n  2,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  1,\n  9,\n  0,\n  2,\n  3,\n  4,\n  2,\n  4,\n  6,\n  4,\n  3,\n  8,\n  -1,\n  -1,\n  -1,\n  -1,\n  1,\n  9,\n  4,\n  1,\n  4,\n  2,\n  2,\n  4,\n  6,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  8,\n  1,\n  3,\n  8,\n  6,\n  1,\n  8,\n  4,\n  6,\n  6,\n  10,\n  1,\n  -1,\n  -1,\n  -1,\n  -1,\n  10,\n  1,\n  0,\n  10,\n  0,\n  6,\n  6,\n  0,\n  4,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  4,\n  6,\n  3,\n  4,\n  3,\n  8,\n  6,\n  10,\n  3,\n  0,\n  3,\n  9,\n  10,\n  9,\n  3,\n  -1,\n  10,\n  9,\n  4,\n  6,\n  10,\n  4,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  4,\n  9,\n  5,\n  7,\n  6,\n  11,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  0,\n  8,\n  3,\n  4,\n  9,\n  5,\n  11,\n  7,\n  6,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  5,\n  0,\n  1,\n  5,\n  4,\n  0,\n  7,\n  6,\n  11,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  11,\n  7,\n  6,\n  8,\n  3,\n  4,\n  3,\n  5,\n  4,\n  3,\n  1,\n  5,\n  -1,\n  -1,\n  -1,\n  -1,\n  9,\n  5,\n  4,\n  10,\n  1,\n  2,\n  7,\n  6,\n  11,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  6,\n  11,\n  7,\n  1,\n  2,\n  10,\n  0,\n  8,\n  3,\n  4,\n  9,\n  5,\n  -1,\n  -1,\n  -1,\n  -1,\n  7,\n  6,\n  11,\n  5,\n  4,\n  10,\n  4,\n  2,\n  10,\n  4,\n  0,\n  2,\n  -1,\n  -1,\n  -1,\n  -1,\n  3,\n  4,\n  8,\n  3,\n  5,\n  4,\n  3,\n  2,\n  5,\n  10,\n  5,\n  2,\n  11,\n  7,\n  6,\n  -1,\n  7,\n  2,\n  3,\n  7,\n  6,\n  2,\n  5,\n  4,\n  9,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  9,\n  5,\n  4,\n  0,\n  8,\n  6,\n  0,\n  6,\n  2,\n  6,\n  8,\n  7,\n  -1,\n  -1,\n  -1,\n  -1,\n  3,\n  6,\n  2,\n  3,\n  7,\n  6,\n  1,\n  5,\n  0,\n  5,\n  4,\n  0,\n  -1,\n  -1,\n  -1,\n  -1,\n  6,\n  2,\n  8,\n  6,\n  8,\n  7,\n  2,\n  1,\n  8,\n  4,\n  8,\n  5,\n  1,\n  5,\n  8,\n  -1,\n  9,\n  5,\n  4,\n  10,\n  1,\n  6,\n  1,\n  7,\n  6,\n  1,\n  3,\n  7,\n  -1,\n  -1,\n  -1,\n  -1,\n  1,\n  6,\n  10,\n  1,\n  7,\n  6,\n  1,\n  0,\n  7,\n  8,\n  7,\n  0,\n  9,\n  5,\n  4,\n  -1,\n  4,\n  0,\n  10,\n  4,\n  10,\n  5,\n  0,\n  3,\n  10,\n  6,\n  10,\n  7,\n  3,\n  7,\n  10,\n  -1,\n  7,\n  6,\n  10,\n  7,\n  10,\n  8,\n  5,\n  4,\n  10,\n  4,\n  8,\n  10,\n  -1,\n  -1,\n  -1,\n  -1,\n  6,\n  9,\n  5,\n  6,\n  11,\n  9,\n  11,\n  8,\n  9,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  3,\n  6,\n  11,\n  0,\n  6,\n  3,\n  0,\n  5,\n  6,\n  0,\n  9,\n  5,\n  -1,\n  -1,\n  -1,\n  -1,\n  0,\n  11,\n  8,\n  0,\n  5,\n  11,\n  0,\n  1,\n  5,\n  5,\n  6,\n  11,\n  -1,\n  -1,\n  -1,\n  -1,\n  6,\n  11,\n  3,\n  6,\n  3,\n  5,\n  5,\n  3,\n  1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  1,\n  2,\n  10,\n  9,\n  5,\n  11,\n  9,\n  11,\n  8,\n  11,\n  5,\n  6,\n  -1,\n  -1,\n  -1,\n  -1,\n  0,\n  11,\n  3,\n  0,\n  6,\n  11,\n  0,\n  9,\n  6,\n  5,\n  6,\n  9,\n  1,\n  2,\n  10,\n  -1,\n  11,\n  8,\n  5,\n  11,\n  5,\n  6,\n  8,\n  0,\n  5,\n  10,\n  5,\n  2,\n  0,\n  2,\n  5,\n  -1,\n  6,\n  11,\n  3,\n  6,\n  3,\n  5,\n  2,\n  10,\n  3,\n  10,\n  5,\n  3,\n  -1,\n  -1,\n  -1,\n  -1,\n  5,\n  8,\n  9,\n  5,\n  2,\n  8,\n  5,\n  6,\n  2,\n  3,\n  8,\n  2,\n  -1,\n  -1,\n  -1,\n  -1,\n  9,\n  5,\n  6,\n  9,\n  6,\n  0,\n  0,\n  6,\n  2,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  1,\n  5,\n  8,\n  1,\n  8,\n  0,\n  5,\n  6,\n  8,\n  3,\n  8,\n  2,\n  6,\n  2,\n  8,\n  -1,\n  1,\n  5,\n  6,\n  2,\n  1,\n  6,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  1,\n  3,\n  6,\n  1,\n  6,\n  10,\n  3,\n  8,\n  6,\n  5,\n  6,\n  9,\n  8,\n  9,\n  6,\n  -1,\n  10,\n  1,\n  0,\n  10,\n  0,\n  6,\n  9,\n  5,\n  0,\n  5,\n  6,\n  0,\n  -1,\n  -1,\n  -1,\n  -1,\n  0,\n  3,\n  8,\n  5,\n  6,\n  10,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  10,\n  5,\n  6,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  11,\n  5,\n  10,\n  7,\n  5,\n  11,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  11,\n  5,\n  10,\n  11,\n  7,\n  5,\n  8,\n  3,\n  0,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  5,\n  11,\n  7,\n  5,\n  10,\n  11,\n  1,\n  9,\n  0,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  10,\n  7,\n  5,\n  10,\n  11,\n  7,\n  9,\n  8,\n  1,\n  8,\n  3,\n  1,\n  -1,\n  -1,\n  -1,\n  -1,\n  11,\n  1,\n  2,\n  11,\n  7,\n  1,\n  7,\n  5,\n  1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  0,\n  8,\n  3,\n  1,\n  2,\n  7,\n  1,\n  7,\n  5,\n  7,\n  2,\n  11,\n  -1,\n  -1,\n  -1,\n  -1,\n  9,\n  7,\n  5,\n  9,\n  2,\n  7,\n  9,\n  0,\n  2,\n  2,\n  11,\n  7,\n  -1,\n  -1,\n  -1,\n  -1,\n  7,\n  5,\n  2,\n  7,\n  2,\n  11,\n  5,\n  9,\n  2,\n  3,\n  2,\n  8,\n  9,\n  8,\n  2,\n  -1,\n  2,\n  5,\n  10,\n  2,\n  3,\n  5,\n  3,\n  7,\n  5,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  8,\n  2,\n  0,\n  8,\n  5,\n  2,\n  8,\n  7,\n  5,\n  10,\n  2,\n  5,\n  -1,\n  -1,\n  -1,\n  -1,\n  9,\n  0,\n  1,\n  5,\n  10,\n  3,\n  5,\n  3,\n  7,\n  3,\n  10,\n  2,\n  -1,\n  -1,\n  -1,\n  -1,\n  9,\n  8,\n  2,\n  9,\n  2,\n  1,\n  8,\n  7,\n  2,\n  10,\n  2,\n  5,\n  7,\n  5,\n  2,\n  -1,\n  1,\n  3,\n  5,\n  3,\n  7,\n  5,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  0,\n  8,\n  7,\n  0,\n  7,\n  1,\n  1,\n  7,\n  5,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  9,\n  0,\n  3,\n  9,\n  3,\n  5,\n  5,\n  3,\n  7,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  9,\n  8,\n  7,\n  5,\n  9,\n  7,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  5,\n  8,\n  4,\n  5,\n  10,\n  8,\n  10,\n  11,\n  8,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  5,\n  0,\n  4,\n  5,\n  11,\n  0,\n  5,\n  10,\n  11,\n  11,\n  3,\n  0,\n  -1,\n  -1,\n  -1,\n  -1,\n  0,\n  1,\n  9,\n  8,\n  4,\n  10,\n  8,\n  10,\n  11,\n  10,\n  4,\n  5,\n  -1,\n  -1,\n  -1,\n  -1,\n  10,\n  11,\n  4,\n  10,\n  4,\n  5,\n  11,\n  3,\n  4,\n  9,\n  4,\n  1,\n  3,\n  1,\n  4,\n  -1,\n  2,\n  5,\n  1,\n  2,\n  8,\n  5,\n  2,\n  11,\n  8,\n  4,\n  5,\n  8,\n  -1,\n  -1,\n  -1,\n  -1,\n  0,\n  4,\n  11,\n  0,\n  11,\n  3,\n  4,\n  5,\n  11,\n  2,\n  11,\n  1,\n  5,\n  1,\n  11,\n  -1,\n  0,\n  2,\n  5,\n  0,\n  5,\n  9,\n  2,\n  11,\n  5,\n  4,\n  5,\n  8,\n  11,\n  8,\n  5,\n  -1,\n  9,\n  4,\n  5,\n  2,\n  11,\n  3,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  2,\n  5,\n  10,\n  3,\n  5,\n  2,\n  3,\n  4,\n  5,\n  3,\n  8,\n  4,\n  -1,\n  -1,\n  -1,\n  -1,\n  5,\n  10,\n  2,\n  5,\n  2,\n  4,\n  4,\n  2,\n  0,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  3,\n  10,\n  2,\n  3,\n  5,\n  10,\n  3,\n  8,\n  5,\n  4,\n  5,\n  8,\n  0,\n  1,\n  9,\n  -1,\n  5,\n  10,\n  2,\n  5,\n  2,\n  4,\n  1,\n  9,\n  2,\n  9,\n  4,\n  2,\n  -1,\n  -1,\n  -1,\n  -1,\n  8,\n  4,\n  5,\n  8,\n  5,\n  3,\n  3,\n  5,\n  1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  0,\n  4,\n  5,\n  1,\n  0,\n  5,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  8,\n  4,\n  5,\n  8,\n  5,\n  3,\n  9,\n  0,\n  5,\n  0,\n  3,\n  5,\n  -1,\n  -1,\n  -1,\n  -1,\n  9,\n  4,\n  5,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  4,\n  11,\n  7,\n  4,\n  9,\n  11,\n  9,\n  10,\n  11,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  0,\n  8,\n  3,\n  4,\n  9,\n  7,\n  9,\n  11,\n  7,\n  9,\n  10,\n  11,\n  -1,\n  -1,\n  -1,\n  -1,\n  1,\n  10,\n  11,\n  1,\n  11,\n  4,\n  1,\n  4,\n  0,\n  7,\n  4,\n  11,\n  -1,\n  -1,\n  -1,\n  -1,\n  3,\n  1,\n  4,\n  3,\n  4,\n  8,\n  1,\n  10,\n  4,\n  7,\n  4,\n  11,\n  10,\n  11,\n  4,\n  -1,\n  4,\n  11,\n  7,\n  9,\n  11,\n  4,\n  9,\n  2,\n  11,\n  9,\n  1,\n  2,\n  -1,\n  -1,\n  -1,\n  -1,\n  9,\n  7,\n  4,\n  9,\n  11,\n  7,\n  9,\n  1,\n  11,\n  2,\n  11,\n  1,\n  0,\n  8,\n  3,\n  -1,\n  11,\n  7,\n  4,\n  11,\n  4,\n  2,\n  2,\n  4,\n  0,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  11,\n  7,\n  4,\n  11,\n  4,\n  2,\n  8,\n  3,\n  4,\n  3,\n  2,\n  4,\n  -1,\n  -1,\n  -1,\n  -1,\n  2,\n  9,\n  10,\n  2,\n  7,\n  9,\n  2,\n  3,\n  7,\n  7,\n  4,\n  9,\n  -1,\n  -1,\n  -1,\n  -1,\n  9,\n  10,\n  7,\n  9,\n  7,\n  4,\n  10,\n  2,\n  7,\n  8,\n  7,\n  0,\n  2,\n  0,\n  7,\n  -1,\n  3,\n  7,\n  10,\n  3,\n  10,\n  2,\n  7,\n  4,\n  10,\n  1,\n  10,\n  0,\n  4,\n  0,\n  10,\n  -1,\n  1,\n  10,\n  2,\n  8,\n  7,\n  4,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  4,\n  9,\n  1,\n  4,\n  1,\n  7,\n  7,\n  1,\n  3,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  4,\n  9,\n  1,\n  4,\n  1,\n  7,\n  0,\n  8,\n  1,\n  8,\n  7,\n  1,\n  -1,\n  -1,\n  -1,\n  -1,\n  4,\n  0,\n  3,\n  7,\n  4,\n  3,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  4,\n  8,\n  7,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  9,\n  10,\n  8,\n  10,\n  11,\n  8,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  3,\n  0,\n  9,\n  3,\n  9,\n  11,\n  11,\n  9,\n  10,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  0,\n  1,\n  10,\n  0,\n  10,\n  8,\n  8,\n  10,\n  11,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  3,\n  1,\n  10,\n  11,\n  3,\n  10,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  1,\n  2,\n  11,\n  1,\n  11,\n  9,\n  9,\n  11,\n  8,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  3,\n  0,\n  9,\n  3,\n  9,\n  11,\n  1,\n  2,\n  9,\n  2,\n  11,\n  9,\n  -1,\n  -1,\n  -1,\n  -1,\n  0,\n  2,\n  11,\n  8,\n  0,\n  11,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  3,\n  2,\n  11,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  2,\n  3,\n  8,\n  2,\n  8,\n  10,\n  10,\n  8,\n  9,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  9,\n  10,\n  2,\n  0,\n  9,\n  2,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  2,\n  3,\n  8,\n  2,\n  8,\n  10,\n  0,\n  1,\n  8,\n  1,\n  10,\n  8,\n  -1,\n  -1,\n  -1,\n  -1,\n  1,\n  10,\n  2,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  1,\n  3,\n  8,\n  9,\n  1,\n  8,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  0,\n  9,\n  1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  0,\n  3,\n  8,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n]);\n\nexport default { edgeTable, triTable };\n","import cubesValues from './cubesValues';\nimport { CubeWorkerInput, CubeWorkerResult } from './types';\n\n// Essentially copied from https://github.com/mrdoob/three.js/blob/dev/examples/jsm/objects/MarchingCubes.js\n// with alterations for brevity and readability (why do graphics programmers always use\n// completely incomprehensible variable names?)\n\nconst context = self; // eslint-disable-line no-restricted-globals\n\ncontext.addEventListener('message', function (ev) {\n  const { field } = ev.data as CubeWorkerInput;\n  // the raw size of the vector field\n  const size = Math.cbrt(field.length);\n\n  // temp buffers used to polygonize\n  const vertexList = new Float32Array(12 * 3);\n  const normalList = new Float32Array(12 * 3);\n  const colorList = new Float32Array(12 * 3);\n\n  const enableUvs = false;\n  const enableColors = false;\n  const enableNormals = false;\n\n  const size2 = size * size;\n  const size3 = size2 * size;\n  const halfSize = size / 2.0;\n\n  // deltas\n  const delta = 2.0 / size;\n  const yDelta = size;\n  const zDelta = size2;\n\n  const normalCache = new Float32Array(size3 * 3); // vectors\n  const palette = new Float32Array(size3 * 3); // colors\n\n  const maxCount = size3 * 3;\n  let count = 0;\n\n  let flatShading = false;\n  let isolation = 0.03;\n\n  const positionArray = new Float32Array(maxCount * 3);\n  const normalArray = new Float32Array(maxCount * 3);\n\n  const uvArray = new Float32Array(maxCount * 2);\n  const colorArray = new Float32Array(maxCount * 3);\n\n  function lerp(a: number, b: number, t: number) {\n    return a + (b - a) * t;\n  }\n\n  function vertexInterpolateX(\n    q: number,\n    offset: number,\n    isol: number,\n    x: number,\n    y: number,\n    z: number,\n    valp1: number,\n    valp2: number,\n    colorOffset1: number,\n    colorOffset2: number,\n  ) {\n    const mu = (isol - valp1) / (valp2 - valp1);\n\n    vertexList[offset + 0] = x + mu * delta;\n    vertexList[offset + 1] = y;\n    vertexList[offset + 2] = z;\n\n    normalList[offset + 0] = lerp(normalCache[q + 0], normalCache[q + 3], mu);\n    normalList[offset + 1] = lerp(normalCache[q + 1], normalCache[q + 4], mu);\n    normalList[offset + 2] = lerp(normalCache[q + 2], normalCache[q + 5], mu);\n\n    colorList[offset + 0] = lerp(\n      palette[colorOffset1 * 3 + 0],\n      palette[colorOffset2 * 3 + 0],\n      mu,\n    );\n    colorList[offset + 1] = lerp(\n      palette[colorOffset1 * 3 + 1],\n      palette[colorOffset2 * 3 + 1],\n      mu,\n    );\n    colorList[offset + 2] = lerp(\n      palette[colorOffset1 * 3 + 2],\n      palette[colorOffset2 * 3 + 2],\n      mu,\n    );\n  }\n\n  function vertexInterpolateY(\n    q: number,\n    offset: number,\n    isol: number,\n    x: number,\n    y: number,\n    z: number,\n    valp1: number,\n    valp2: number,\n    colorOffset1: number,\n    colorOffset2: number,\n  ) {\n    const mu = (isol - valp1) / (valp2 - valp1);\n\n    vertexList[offset + 0] = x;\n    vertexList[offset + 1] = y + mu * delta;\n    vertexList[offset + 2] = z;\n\n    const q2 = q + yDelta * 3;\n\n    normalList[offset + 0] = lerp(normalCache[q + 0], normalCache[q2 + 0], mu);\n    normalList[offset + 1] = lerp(normalCache[q + 1], normalCache[q2 + 1], mu);\n    normalList[offset + 2] = lerp(normalCache[q + 2], normalCache[q2 + 2], mu);\n\n    colorList[offset + 0] = lerp(\n      palette[colorOffset1 * 3 + 0],\n      palette[colorOffset2 * 3 + 0],\n      mu,\n    );\n    colorList[offset + 1] = lerp(\n      palette[colorOffset1 * 3 + 1],\n      palette[colorOffset2 * 3 + 1],\n      mu,\n    );\n    colorList[offset + 2] = lerp(\n      palette[colorOffset1 * 3 + 2],\n      palette[colorOffset2 * 3 + 2],\n      mu,\n    );\n  }\n\n  function vertexInterpolateZ(\n    q: number,\n    offset: number,\n    isol: number,\n    x: number,\n    y: number,\n    z: number,\n    valp1: number,\n    valp2: number,\n    colorOffset1: number,\n    colorOffset2: number,\n  ) {\n    const mu = (isol - valp1) / (valp2 - valp1);\n\n    vertexList[offset + 0] = x;\n    vertexList[offset + 1] = y;\n    vertexList[offset + 2] = z + mu * delta;\n\n    const q2 = q + zDelta * 3;\n\n    normalList[offset + 0] = lerp(normalCache[q + 0], normalCache[q2 + 0], mu);\n    normalList[offset + 1] = lerp(normalCache[q + 1], normalCache[q2 + 1], mu);\n    normalList[offset + 2] = lerp(normalCache[q + 2], normalCache[q2 + 2], mu);\n\n    colorList[offset + 0] = lerp(\n      palette[colorOffset1 * 3 + 0],\n      palette[colorOffset2 * 3 + 0],\n      mu,\n    );\n    colorList[offset + 1] = lerp(\n      palette[colorOffset1 * 3 + 1],\n      palette[colorOffset2 * 3 + 1],\n      mu,\n    );\n    colorList[offset + 2] = lerp(\n      palette[colorOffset1 * 3 + 2],\n      palette[colorOffset2 * 3 + 2],\n      mu,\n    );\n  }\n\n  function computeNormal(q: number) {\n    const q3 = q * 3;\n    if (normalCache[q3] === 0.0) {\n      normalCache[q3 + 0] = field[q - 1] - field[q + 1];\n      normalCache[q3 + 1] = field[q - yDelta] - field[q + yDelta];\n      normalCache[q3 + 2] = field[q - zDelta] - field[q + zDelta];\n    }\n  }\n\n  /**\n   * @returns number of triangles\n   */\n  function polygonize(\n    fx: number,\n    fy: number,\n    fz: number,\n    q: number,\n    isol: number,\n  ) {\n    // cache indices\n    let q1 = q + 1,\n      qy = q + yDelta,\n      qz = q + zDelta,\n      q1y = q1 + yDelta,\n      q1z = q1 + zDelta,\n      qyz = q + yDelta + zDelta,\n      q1yz = q1 + yDelta + zDelta;\n\n    let cubeIndex = 0,\n      field0 = field[q],\n      field1 = field[q1],\n      field2 = field[qy],\n      field3 = field[q1y],\n      field4 = field[qz],\n      field5 = field[q1z],\n      field6 = field[qyz],\n      field7 = field[q1yz];\n\n    if (field0 < isol) cubeIndex |= 1;\n    if (field1 < isol) cubeIndex |= 2;\n    if (field2 < isol) cubeIndex |= 8;\n    if (field3 < isol) cubeIndex |= 4;\n    if (field4 < isol) cubeIndex |= 16;\n    if (field5 < isol) cubeIndex |= 32;\n    if (field6 < isol) cubeIndex |= 128;\n    if (field7 < isol) cubeIndex |= 64;\n\n    const bits = cubesValues.edgeTable[cubeIndex];\n\n    // cube is entirely included or excluded; no vertices to render\n    if (bits === 0) return 0;\n\n    let fx2 = fx + delta,\n      fy2 = fy + delta,\n      fz2 = fz + delta;\n\n    // top of the cube\n    if (bits & 1) {\n      computeNormal(q);\n      computeNormal(q1);\n      vertexInterpolateX(q * 3, 0, isol, fx, fy, fz, field0, field1, q, q1);\n    }\n\n    if (bits & 2) {\n      computeNormal(q1);\n      computeNormal(q1y);\n      vertexInterpolateY(q1 * 3, 3, isol, fx2, fy, fz, field1, field3, q1, q1y);\n    }\n\n    if (bits & 4) {\n      computeNormal(qy);\n      computeNormal(q1y);\n      vertexInterpolateX(qy * 3, 6, isol, fx, fy2, fz, field2, field3, qy, q1y);\n    }\n\n    if (bits & 8) {\n      computeNormal(q);\n      computeNormal(qy);\n      vertexInterpolateY(q * 3, 9, isol, fx, fy, fz, field0, field2, q, qy);\n    }\n\n    // bottom of the cube\n    if (bits & 16) {\n      computeNormal(qz);\n      computeNormal(q1z);\n      vertexInterpolateX(\n        qz * 3,\n        12,\n        isol,\n        fx,\n        fy,\n        fz2,\n        field4,\n        field5,\n        qz,\n        q1z,\n      );\n    }\n\n    if (bits & 32) {\n      computeNormal(q1z);\n      computeNormal(q1yz);\n      vertexInterpolateY(\n        q1z * 3,\n        15,\n        isol,\n        fx2,\n        fy,\n        fz2,\n        field5,\n        field7,\n        q1z,\n        q1yz,\n      );\n    }\n\n    if (bits & 64) {\n      computeNormal(qyz);\n      computeNormal(q1yz);\n      vertexInterpolateX(\n        qyz * 3,\n        18,\n        isol,\n        fx,\n        fy2,\n        fz2,\n        field6,\n        field7,\n        qyz,\n        q1yz,\n      );\n    }\n\n    if (bits & 128) {\n      computeNormal(qz);\n      computeNormal(qyz);\n      vertexInterpolateY(\n        qz * 3,\n        21,\n        isol,\n        fx,\n        fy,\n        fz2,\n        field4,\n        field6,\n        qz,\n        qyz,\n      );\n    }\n\n    // vertical lines of the cube\n    if (bits & 256) {\n      computeNormal(q);\n      computeNormal(qz);\n      vertexInterpolateZ(q * 3, 24, isol, fx, fy, fz, field0, field4, q, qz);\n    }\n    if (bits & 512) {\n      computeNormal(q1);\n      computeNormal(q1z);\n      vertexInterpolateZ(\n        q1 * 3,\n        27,\n        isol,\n        fx2,\n        fy,\n        fz,\n        field1,\n        field5,\n        q1,\n        q1z,\n      );\n    }\n    if (bits & 1024) {\n      computeNormal(q1y);\n      computeNormal(q1yz);\n      vertexInterpolateZ(\n        q1y * 3,\n        30,\n        isol,\n        fx2,\n        fy2,\n        fz,\n        field3,\n        field7,\n        q1y,\n        q1yz,\n      );\n    }\n    if (bits & 2048) {\n      computeNormal(qy);\n      computeNormal(qyz);\n      vertexInterpolateZ(\n        qy * 3,\n        33,\n        isol,\n        fx,\n        fy2,\n        fz,\n        field2,\n        field6,\n        qy,\n        qyz,\n      );\n    }\n\n    cubeIndex <<= 4; // re-purpose cube index into an offset into triangle table\n\n    let o1,\n      o2,\n      o3,\n      numTris = 0,\n      i = 0;\n\n    while (cubesValues.triTable[cubeIndex + i] !== -1) {\n      o1 = cubeIndex + i;\n      o2 = o1 + 1;\n      o3 = o1 + 2;\n\n      posnormtriv(\n        vertexList,\n        normalList,\n        colorList,\n        3 * cubesValues.triTable[o1],\n        3 * cubesValues.triTable[o2],\n        3 * cubesValues.triTable[o3],\n      );\n\n      i += 3;\n      numTris++;\n    }\n\n    return numTris;\n  }\n\n  function posnormtriv(\n    pos: Float32Array,\n    norm: Float32Array,\n    colors: Float32Array,\n    o1: number,\n    o2: number,\n    o3: number,\n  ) {\n    const c = count * 3;\n\n    // positions\n    positionArray[c + 0] = pos[o1 + 0];\n    positionArray[c + 1] = pos[o1 + 1];\n    positionArray[c + 2] = pos[o1 + 2];\n    positionArray[c + 3] = pos[o2 + 0];\n    positionArray[c + 4] = pos[o2 + 1];\n    positionArray[c + 5] = pos[o2 + 2];\n    positionArray[c + 6] = pos[o3 + 0];\n    positionArray[c + 7] = pos[o3 + 1];\n    positionArray[c + 8] = pos[o3 + 2];\n\n    // normals\n    if (enableNormals) {\n      if (flatShading) {\n        const nx = (norm[o1 + 0] + norm[o2 + 0] + norm[o3 + 0]) / 3;\n        const ny = (norm[o1 + 1] + norm[o2 + 1] + norm[o3 + 1]) / 3;\n        const nz = (norm[o1 + 2] + norm[o2 + 2] + norm[o3 + 2]) / 3;\n\n        normalArray[c + 0] = nx;\n        normalArray[c + 1] = ny;\n        normalArray[c + 2] = nz;\n        normalArray[c + 3] = nx;\n        normalArray[c + 4] = ny;\n        normalArray[c + 5] = nz;\n        normalArray[c + 6] = nx;\n        normalArray[c + 7] = ny;\n        normalArray[c + 8] = nz;\n      } else {\n        normalArray[c + 0] = norm[o1 + 0];\n        normalArray[c + 1] = norm[o1 + 1];\n        normalArray[c + 2] = norm[o1 + 2];\n        normalArray[c + 3] = norm[o2 + 0];\n        normalArray[c + 4] = norm[o2 + 1];\n        normalArray[c + 5] = norm[o2 + 2];\n        normalArray[c + 6] = norm[o3 + 0];\n        normalArray[c + 7] = norm[o3 + 1];\n        normalArray[c + 8] = norm[o3 + 2];\n      }\n    }\n\n    // uvs\n    if (enableUvs) {\n      const d = count * 2;\n      uvArray[d + 0] = pos[o1 + 0];\n      uvArray[d + 1] = pos[o1 + 2];\n      uvArray[d + 2] = pos[o2 + 0];\n      uvArray[d + 3] = pos[o2 + 2];\n      uvArray[d + 4] = pos[o3 + 0];\n      uvArray[d + 5] = pos[o3 + 2];\n    }\n\n    // colors\n    if (enableColors) {\n      colorArray[c + 0] = colors[o1 + 0];\n      colorArray[c + 1] = colors[o1 + 1];\n      colorArray[c + 2] = colors[o1 + 2];\n      colorArray[c + 3] = colors[o2 + 0];\n      colorArray[c + 4] = colors[o2 + 1];\n      colorArray[c + 5] = colors[o2 + 2];\n      colorArray[c + 6] = colors[o3 + 0];\n      colorArray[c + 7] = colors[o3 + 1];\n      colorArray[c + 8] = colors[o3 + 2];\n    }\n\n    count += 3;\n  }\n\n  function generate() {\n    const startValue = 0;\n    const endValue = size - 1;\n    for (let z = startValue; z < endValue; z++) {\n      const zOffset = size2 * z;\n      const fz = (z - halfSize) / halfSize;\n      for (let y = startValue; y < endValue; y++) {\n        const yOffset = zOffset + size * y;\n        const fy = (y - halfSize) / halfSize;\n        for (let x = startValue; x < endValue; x++) {\n          const fx = (x - halfSize) / halfSize;\n          const q = yOffset + x;\n\n          polygonize(fx, fy, fz, q, isolation);\n        }\n      }\n    }\n\n    const result: CubeWorkerResult = {\n      hasPositions: true,\n      positionArray,\n      hasNormals: enableNormals,\n      normalArray,\n      hasColors: enableColors,\n      colorArray,\n      hasUvs: enableUvs,\n      uvArray,\n      count,\n    };\n\n    (context as any).postMessage(result);\n  }\n\n  generate();\n});\n"],"sourceRoot":""}