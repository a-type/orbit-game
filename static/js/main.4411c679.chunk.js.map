{"version":3,"sources":["generation/generateTerrain.ts","cubes/generateVoxelGeometry.ts","Scene.module.css","App.module.css","generation/noise.worker.ts","cubes/cubes.worker.ts","effects/Effects.tsx","meshes/Ocean.tsx","meshes/MarchingCubes.tsx","meshes/Terrain.tsx","Scene.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["generateTerrain","input","worker","Worker","name","type","Promise","resolve","reject","addEventListener","ev","data","postMessage","concatenate","a","b","length","result","Float32Array","set","slice","chunkData","geometry","BufferGeometry","positionArray","normalArray","colorArray","uvArray","hasPositions","count","setAttribute","BufferAttribute","hasNormals","computeVertexNormals","hasColors","hasUvs","module","exports","Effects","composer","useRef","useThree","scene","gl","size","camera","useEffect","current","setSize","width","height","useFrame","render","ref","args","attachArray","extend","EffectComposer","ShaderPass","RenderPass","UnrealBloomPass","OutlinePass","rotation","Euler","Math","PI","Ocean","position","React","Vector3","attach","color","transparent","opacity","MarchingCubesChunk","props","fallback","MarchingCubesChunkMesh","getChunkPosition","coordinate","x","y","z","generate","rest","usePromise","field","generateVoxelGeometry","chunkSize","scale","useMemo","castShadow","receiveShadow","ChunkCoordinate","this","useVisibleChunks","viewPosition","renderDistance","vec","divisor","round","visibleChunks","cx","cy","cz","push","MarchingCubes","children","generateChunk","coord","adjustedSize","offset","worldCoordinate","chunkMaterial","MeshToonMaterial","wireframe","Terrain","chunks","map","chunk","key","material","ZERO","Scene","className","styles","makeDefault","App","app","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4411c679.chunk.js","sourcesContent":["import { NoiseWorkerInput, NoiseWorkerResult } from './types';\n\nexport function generateTerrain(input: NoiseWorkerInput) {\n  const worker = new Worker('./noise.worker', {\n    name: 'NoiseWorker',\n    type: 'module',\n  });\n\n  return new Promise<{ field: Float32Array }>((resolve, reject) => {\n    worker.addEventListener('message', (ev) => {\n      const data = ev.data as NoiseWorkerResult;\n      resolve(data);\n    });\n    worker.postMessage(input);\n  });\n}\n","import { BufferGeometry, BufferAttribute } from 'three';\nimport { CubeWorkerInput, CubeWorkerResult } from './types';\n\nfunction concatenate(a: Float32Array, b: Float32Array, length: number) {\n  const result = new Float32Array(a.length + length);\n  result.set(a, 0);\n  result.set(b.slice(0, length), a.length);\n  return result;\n}\n\nexport default (chunkData: CubeWorkerInput) => {\n  const worker = new Worker('./cubes.worker', {\n    name: 'CubeWorker',\n    type: 'module',\n  });\n  return new Promise<{ geometry: BufferGeometry }>((resolve, reject) => {\n    worker.addEventListener('message', (ev) => {\n      const data = ev.data as CubeWorkerResult;\n\n      const geometry = new BufferGeometry();\n      let positionArray = new Float32Array();\n      let normalArray = new Float32Array();\n      let colorArray = new Float32Array();\n      let uvArray = new Float32Array();\n\n      if (data.hasPositions) {\n        positionArray = concatenate(\n          positionArray,\n          data.positionArray,\n          data.count * 3,\n        );\n        geometry.setAttribute(\n          'position',\n          new BufferAttribute(positionArray, 3),\n        );\n      }\n      if (data.hasNormals) {\n        normalArray = concatenate(\n          normalArray,\n          data.normalArray,\n          data.count * 3,\n        );\n        geometry.setAttribute('normal', new BufferAttribute(normalArray, 3));\n      } else {\n        geometry.computeVertexNormals();\n      }\n      if (data.hasColors) {\n        colorArray = concatenate(colorArray, data.colorArray, data.count * 3);\n        geometry.setAttribute('color', new BufferAttribute(colorArray, 3));\n      }\n      if (data.hasUvs) {\n        uvArray = concatenate(uvArray, data.uvArray, data.count * 2);\n        geometry.setAttribute('uv', new BufferAttribute(uvArray, 2));\n      }\n\n      // seems to have issues.\n      //geometry.computeBoundingSphere();\n\n      resolve({ geometry });\n    });\n\n    worker.postMessage(chunkData);\n  });\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"scene\":\"Scene_scene__3qFsF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__1kX79\"};","module.exports = __webpack_public_path__ + \"static/js/NoiseWorker.af6f2b86.chunk.worker.js\"","module.exports = __webpack_public_path__ + \"static/js/CubeWorker.8771c507.chunk.worker.js\"","import React, { useEffect, useRef } from 'react';\nimport {\n  extend,\n  useFrame,\n  useThree,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  ReactThreeFiber,\n} from 'react-three-fiber';\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer';\nimport { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass';\nimport { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass';\nimport { OutlinePass } from 'three/examples/jsm/postprocessing/OutlinePass';\n\n// Makes these prototypes available as \"native\" jsx-string elements\nextend({\n  EffectComposer,\n  ShaderPass,\n  RenderPass,\n  UnrealBloomPass,\n  OutlinePass,\n});\n\ndeclare global {\n  namespace JSX {\n    interface IntrinsicElements {\n      effectComposer: ReactThreeFiber.Object3DNode<\n        EffectComposer,\n        typeof EffectComposer\n      >;\n      shaderPass: ReactThreeFiber.Object3DNode<ShaderPass, typeof ShaderPass>;\n      renderPass: ReactThreeFiber.Object3DNode<RenderPass, typeof RenderPass>;\n      unrealBloomPass: ReactThreeFiber.Object3DNode<\n        UnrealBloomPass,\n        typeof UnrealBloomPass\n      >;\n      outlinePass: ReactThreeFiber.Object3DNode<\n        OutlinePass,\n        typeof OutlinePass\n      >;\n    }\n  }\n}\n\nexport function Effects() {\n  const composer = useRef<EffectComposer>();\n  const { scene, gl, size, camera } = useThree();\n  // const aspect = useMemo(() => new Vector2(size.width, size.height), [size]);\n  useEffect(() => void composer.current!.setSize(size.width, size.height), [\n    size,\n  ]);\n  useFrame(() => composer.current!.render(), 1);\n\n  return (\n    <effectComposer ref={composer} args={[gl]}>\n      <renderPass attachArray=\"passes\" scene={scene} camera={camera} />\n    </effectComposer>\n  );\n}\n","import { Plane } from 'drei';\nimport * as React from 'react';\nimport { Euler, Vector3 } from 'three';\n\nexport type OceanProps = {\n  height: number;\n};\n\nconst rotation = new Euler(Math.PI * 1.5, 0, 0);\n\nexport function Ocean({ height }: OceanProps) {\n  const position = React.useMemo(() => new Vector3(0, height, 0), [height]);\n\n  return (\n    <Plane position={position} args={[1000, 1000]} rotation={rotation}>\n      <meshPhongMaterial\n        attach=\"material\"\n        color=\"blue\"\n        transparent\n        opacity={0.8}\n      />\n    </Plane>\n  );\n}\n","import React, { ReactNode, Suspense, useMemo } from 'react';\nimport { Material, Vector3 } from 'three';\nimport generateVoxelGeometry from '../cubes/generateVoxelGeometry';\nimport usePromise from 'react-promise-suspense';\n\nexport type MarchingCubesChunkProps = {\n  coordinate: ChunkCoordinate;\n  generate: (coordinate: ChunkCoordinate) => Promise<Float32Array>;\n  material?: Material;\n};\n\nexport function MarchingCubesChunk(props: MarchingCubesChunkProps) {\n  return (\n    <Suspense fallback={null}>\n      <MarchingCubesChunkMesh {...props} />\n    </Suspense>\n  );\n}\n\nfunction getChunkPosition(coordinate: ChunkCoordinate) {\n  return new Vector3(\n    coordinate.x * coordinate.size,\n    coordinate.y * coordinate.size,\n    coordinate.z * coordinate.size,\n  );\n}\n\nfunction MarchingCubesChunkMesh({\n  coordinate,\n  generate,\n  ...rest\n}: MarchingCubesChunkProps) {\n  const geometry = usePromise(\n    async (\n      coordinate: ChunkCoordinate,\n      generate: (c: ChunkCoordinate) => Promise<Float32Array>,\n    ) => {\n      const field = await generate(coordinate);\n      const { geometry } = await generateVoxelGeometry({\n        field,\n      });\n      return geometry;\n    },\n    [coordinate, generate],\n  );\n\n  const chunkSize = coordinate.size;\n  const scale = useMemo(\n    () =>\n      new Vector3(\n        0.5 + chunkSize / 2,\n        0.5 + chunkSize / 2,\n        0.5 + chunkSize / 2,\n      ),\n    [chunkSize],\n  );\n\n  return (\n    <mesh\n      geometry={geometry}\n      position={getChunkPosition(coordinate)}\n      castShadow\n      receiveShadow\n      scale={scale}\n      {...rest}\n    />\n  );\n}\n\nexport class ChunkCoordinate {\n  constructor(\n    public x: number,\n    public y: number,\n    public z: number,\n    public size: number,\n  ) {}\n  get key() {\n    return `${this.x}.${this.y}.${this.z}.${this.size}`;\n  }\n  get volume() {\n    return this.size * this.size * this.size;\n  }\n  get worldCoordinate() {\n    return new Vector3(\n      this.x * this.size,\n      this.y * this.size,\n      this.z * this.size,\n    );\n  }\n}\n\nexport type MarchingCubesProps = {\n  renderDistance: number;\n  viewPosition: Vector3;\n  chunkSize: number;\n  children: (chunksToRender: ChunkCoordinate[]) => ReactNode;\n};\n\nfunction roundVector(vec: Vector3, divisor: number) {\n  return [\n    Math.round(vec.x / divisor),\n    Math.round(vec.y / divisor),\n    Math.round(vec.z / divisor),\n  ];\n}\n\nfunction useVisibleChunks(\n  viewPosition: Vector3,\n  chunkSize: number,\n  renderDistance: number,\n) {\n  const [x, y, z] = roundVector(viewPosition, chunkSize);\n  return useMemo(() => {\n    const visibleChunks: ChunkCoordinate[] = [];\n    for (let cx = x - renderDistance; cx <= x + renderDistance; cx++) {\n      for (let cy = y - renderDistance; cy <= y + renderDistance; cy++) {\n        for (let cz = z - renderDistance; cz <= z + renderDistance; cz++) {\n          visibleChunks.push(new ChunkCoordinate(cx, cy, cz, chunkSize));\n        }\n      }\n    }\n    return visibleChunks;\n  }, [renderDistance, x, y, z, chunkSize]);\n}\n\nexport function MarchingCubes(props: MarchingCubesProps) {\n  const visibleChunks = useVisibleChunks(\n    props.viewPosition,\n    props.chunkSize,\n    props.renderDistance,\n  );\n\n  return <group>{props.children(visibleChunks)}</group>;\n}\n","import * as React from 'react';\nimport { MeshToonMaterial, Vector3 } from 'three';\nimport { generateTerrain } from '../generation/generateTerrain';\nimport {\n  ChunkCoordinate,\n  MarchingCubes,\n  MarchingCubesChunk,\n} from './MarchingCubes';\n\nexport type TerrainProps = {\n  viewPosition: Vector3;\n  renderDistance: number;\n};\n\nasync function generateChunk(coord: ChunkCoordinate) {\n  const adjustedSize = coord.size + 1;\n  const offset: [number, number, number] = [\n    coord.worldCoordinate.x,\n    coord.worldCoordinate.y,\n    coord.worldCoordinate.z,\n  ];\n  const { field } = await generateTerrain({\n    size: adjustedSize,\n    offset,\n  });\n  return field;\n}\n\nconst chunkMaterial = new MeshToonMaterial({\n  color: 'brown',\n  wireframe: false,\n});\n\nexport function Terrain(props: TerrainProps) {\n  return (\n    <MarchingCubes\n      chunkSize={32}\n      viewPosition={props.viewPosition}\n      renderDistance={props.renderDistance}\n    >\n      {(chunks) =>\n        chunks.map((chunk) => (\n          <MarchingCubesChunk\n            key={chunk.key}\n            coordinate={chunk}\n            generate={generateChunk}\n            material={chunkMaterial}\n          />\n        ))\n      }\n    </MarchingCubes>\n  );\n}\n","import { OrbitControls, PerspectiveCamera } from 'drei';\nimport React, { FC } from 'react';\nimport { Canvas } from 'react-three-fiber';\nimport { Vector3 } from 'three';\nimport { Effects } from './effects/Effects';\nimport { Ocean } from './meshes/Ocean';\nimport { Terrain } from './meshes/Terrain';\nimport styles from './Scene.module.css';\n\nexport interface SceneProps {}\n\nconst ZERO = new Vector3(0, 0, 0);\n\nconst Scene: FC<SceneProps> = () => {\n  return (\n    <Canvas className={styles.scene}>\n      <Terrain viewPosition={ZERO} renderDistance={2} />\n      <Ocean height={-20} />\n      <pointLight position={[10, 10, 10]} />\n      <pointLight position={[0, 100, 0]} />\n      <ambientLight color=\"#eee\" />\n      <PerspectiveCamera makeDefault position={[0, 0, 10]} />\n      <OrbitControls />\n      <Effects />\n    </Canvas>\n  );\n};\n\nexport default Scene;\n","import React from 'react';\nimport Scene from './Scene';\nimport styles from './App.module.css';\n\nfunction App() {\n  return (\n    <div className={styles.app}>\n      <Scene />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}